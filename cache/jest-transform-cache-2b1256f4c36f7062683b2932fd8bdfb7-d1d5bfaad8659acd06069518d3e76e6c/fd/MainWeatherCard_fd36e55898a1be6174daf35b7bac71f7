cdd5c74ea91deeaecf8506ca1deb0775
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _reactNative = require("react-native");

var _react = _interopRequireDefault(require("react"));

function cov_e0vxjqmul() {
  var path = "/Users/eliseodiazmedina/Workspace/react-native/wonderWeather/components/MainWeatherCard/MainWeatherCard.js";
  var hash = "739e73504b82dda893c636f2dc5f4556ab4c71ba";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "/Users/eliseodiazmedina/Workspace/react-native/wonderWeather/components/MainWeatherCard/MainWeatherCard.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 58
        },
        end: {
          line: 7,
          column: 66
        }
      },
      "1": {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 29,
          column: 4
        }
      },
      "2": {
        start: {
          line: 34,
          column: 15
        },
        end: {
          line: 73,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "MainWeatherCard",
        decl: {
          start: {
            line: 5,
            column: 9
          },
          end: {
            line: 5,
            column: 24
          }
        },
        loc: {
          start: {
            line: 5,
            column: 58
          },
          end: {
            line: 30,
            column: 1
          }
        },
        line: 5
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 16,
            column: 11
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 12,
            column: 37
          }
        }, {
          start: {
            line: 13,
            column: 12
          },
          end: {
            line: 15,
            column: 19
          }
        }],
        line: 12
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "739e73504b82dda893c636f2dc5f4556ab4c71ba"
  };
  var coverage = global[gcv] || (global[gcv] = {});

  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }

  var actualCoverage = coverage[path];
  {
    cov_e0vxjqmul = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}

cov_e0vxjqmul();

function MainWeatherCard(_ref) {
  var cityInfo = _ref.cityInfo,
      isCurrentLocation = _ref.isCurrentLocation;
  cov_e0vxjqmul().f[0]++;

  var _ref2 = (cov_e0vxjqmul().s[0]++, cityInfo),
      city = _ref2.city,
      country = _ref2.country,
      temp = _ref2.temp,
      minTemp = _ref2.minTemp,
      maxTemp = _ref2.maxTemp,
      icon = _ref2.icon;

  cov_e0vxjqmul().s[1]++;
  return _react.default.createElement(_react.default.Fragment, null, _react.default.createElement(_reactNative.Text, {
    testID: "MainWeatherCard.city",
    style: styles.city
  }, city), _react.default.createElement(_reactNative.Text, {
    style: styles.country
  }, country), (cov_e0vxjqmul().b[0][0]++, isCurrentLocation === true) && (cov_e0vxjqmul().b[0][1]++, _react.default.createElement(_reactNative.Text, null, "Uicaci\xF3n actual")), _react.default.createElement(_reactNative.View, {
    style: styles.current
  }, _react.default.createElement(_reactNative.Image, {
    style: styles.largeIcon,
    source: {
      uri: "https://openweathermap.org/img/wn/" + icon + "@4x.png"
    }
  }), _react.default.createElement(_reactNative.Text, {
    style: styles.currentTemp
  }, Math.round(temp), "\xB0C"), _react.default.createElement(_reactNative.Text, {
    style: styles.maxTemp
  }, "Max ", Math.round(maxTemp), "\xB0C"), _react.default.createElement(_reactNative.Text, {
    style: styles.minTemp
  }, "Min ", Math.round(minTemp), "\xB0C")));
}

var _default = MainWeatherCard;
exports.default = _default;
var styles = (cov_e0vxjqmul().s[2]++, _reactNative.StyleSheet.create({
  city: {
    width: '100%',
    textAlign: 'center',
    fontSize: 32,
    color: '#e96e50'
  },
  country: {
    width: '100%',
    textAlign: 'center',
    fontSize: 24,
    color: '#d6a99e'
  },
  current: {
    flexDirection: 'column',
    alignItems: 'flex-end',
    alignContent: 'center'
  },
  largeIcon: {
    width: 250,
    height: 200
  },
  currentTemp: {
    fontSize: 32,
    fontWeight: 'bold',
    textAlign: 'center'
  },
  maxTemp: {
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center'
  },
  minTemp: {
    fontSize: 16,
    fontWeight: 'bold',
    textAlign: 'center'
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYWluV2VhdGhlckNhcmQiLCJjaXR5SW5mbyIsImlzQ3VycmVudExvY2F0aW9uIiwiY2l0eSIsImNvdW50cnkiLCJ0ZW1wIiwibWluVGVtcCIsIm1heFRlbXAiLCJpY29uIiwic3R5bGVzIiwiY3VycmVudCIsImxhcmdlSWNvbiIsInVyaSIsImN1cnJlbnRUZW1wIiwiTWF0aCIsInJvdW5kIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsIndpZHRoIiwidGV4dEFsaWduIiwiZm9udFNpemUiLCJjb2xvciIsImZsZXhEaXJlY3Rpb24iLCJhbGlnbkl0ZW1zIiwiYWxpZ25Db250ZW50IiwiaGVpZ2h0IiwiZm9udFdlaWdodCJdLCJzb3VyY2VzIjpbIk1haW5XZWF0aGVyQ2FyZC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdHlsZVNoZWV0LCBWaWV3LCBUZXh0LCBJbWFnZSB9IGZyb20gJ3JlYWN0LW5hdGl2ZSc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5cbmZ1bmN0aW9uIE1haW5XZWF0aGVyQ2FyZCh7IGNpdHlJbmZvLCBpc0N1cnJlbnRMb2NhdGlvbiB9KSB7XG5cbiAgY29uc3QgeyBjaXR5LCBjb3VudHJ5LCB0ZW1wLCBtaW5UZW1wLCBtYXhUZW1wLCBpY29uIH0gPSBjaXR5SW5mbztcbiAgcmV0dXJuIChcbiAgICAgIDw+XG4gICAgICAgICAgPFRleHQgdGVzdElEPVwiTWFpbldlYXRoZXJDYXJkLmNpdHlcIiBzdHlsZT17c3R5bGVzLmNpdHl9PntjaXR5fTwvVGV4dD5cbiAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmNvdW50cnl9Pntjb3VudHJ5fTwvVGV4dD5cbiAgICAgICAgICB7aXNDdXJyZW50TG9jYXRpb24gPT09IHRydWUgJiYgKFxuICAgICAgICAgICAgPFRleHQ+XG4gICAgICAgICAgICAgIFVpY2FjacOzbiBhY3R1YWxcbiAgICAgICAgICAgIDwvVGV4dD5cbiAgICAgICAgICApfVxuICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMuY3VycmVudH0+XG4gICAgICAgICAgICAgIDxJbWFnZVxuICAgICAgICAgICAgICAgICAgc3R5bGU9e3N0eWxlcy5sYXJnZUljb259XG4gICAgICAgICAgICAgICAgICBzb3VyY2U9e3tcbiAgICAgICAgICAgICAgICAgIHVyaTogYGh0dHBzOi8vb3BlbndlYXRoZXJtYXAub3JnL2ltZy93bi8ke2ljb259QDR4LnBuZ2AsXG4gICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLmN1cnJlbnRUZW1wfT57TWF0aC5yb3VuZCh0ZW1wKX3CsEM8L1RleHQ+XG4gICAgICAgICAgICAgIDxUZXh0IHN0eWxlPXtzdHlsZXMubWF4VGVtcH0+TWF4IHtNYXRoLnJvdW5kKG1heFRlbXApfcKwQzwvVGV4dD5cbiAgICAgICAgICAgICAgPFRleHQgc3R5bGU9e3N0eWxlcy5taW5UZW1wfT5NaW4ge01hdGgucm91bmQobWluVGVtcCl9wrBDPC9UZXh0PlxuICAgICAgICAgIDwvVmlldz5cbiAgICAgIDwvPlxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBNYWluV2VhdGhlckNhcmQ7XG5cbmNvbnN0IHN0eWxlcyA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgICBjaXR5OiB7XG4gICAgICAgIHdpZHRoOiAnMTAwJScsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICAgIGZvbnRTaXplOiAzMixcbiAgICAgICAgY29sb3I6ICcjZTk2ZTUwJ1xuICAgIH0sXG4gICAgY291bnRyeToge1xuICAgICAgICB3aWR0aDogJzEwMCUnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgICBmb250U2l6ZTogMjQsXG4gICAgICAgIGNvbG9yOiAnI2Q2YTk5ZSdcbiAgICB9LFxuICAgIGN1cnJlbnQ6IHtcbiAgICAgICAgZmxleERpcmVjdGlvbjogJ2NvbHVtbicsXG4gICAgICAgIGFsaWduSXRlbXM6ICdmbGV4LWVuZCcsXG4gICAgICAgIGFsaWduQ29udGVudDogJ2NlbnRlcicsXG4gICAgfSxcbiAgICBsYXJnZUljb246IHtcbiAgICAgICAgd2lkdGg6IDI1MCxcbiAgICAgICAgaGVpZ2h0OiAyMDAsXG4gICAgICB9LFxuICAgICAgY3VycmVudFRlbXA6IHtcbiAgICAgICAgZm9udFNpemU6IDMyLFxuICAgICAgICBmb250V2VpZ2h0OiAnYm9sZCcsXG4gICAgICAgIHRleHRBbGlnbjogJ2NlbnRlcicsXG4gICAgICB9LFxuICAgICAgbWF4VGVtcDoge1xuICAgICAgICBmb250U2l6ZTogMTYsXG4gICAgICAgIGZvbnRXZWlnaHQ6ICdib2xkJyxcbiAgICAgICAgdGV4dEFsaWduOiAnY2VudGVyJyxcbiAgICAgIH0sXG4gICAgICBtaW5UZW1wOiB7XG4gICAgICAgIGZvbnRTaXplOiAxNixcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICB0ZXh0QWxpZ246ICdjZW50ZXInLFxuICAgICAgfSwgIFxuXG5cbn0pIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFHQSxTQUFTQSxlQUFULE9BQTBEO0VBQUEsSUFBL0JDLFFBQStCLFFBQS9CQSxRQUErQjtFQUFBLElBQXJCQyxpQkFBcUIsUUFBckJBLGlCQUFxQjtFQUFBOztFQUV4RCxxQ0FBd0RELFFBQXhEO0VBQUEsSUFBUUUsSUFBUixTQUFRQSxJQUFSO0VBQUEsSUFBY0MsT0FBZCxTQUFjQSxPQUFkO0VBQUEsSUFBdUJDLElBQXZCLFNBQXVCQSxJQUF2QjtFQUFBLElBQTZCQyxPQUE3QixTQUE2QkEsT0FBN0I7RUFBQSxJQUFzQ0MsT0FBdEMsU0FBc0NBLE9BQXRDO0VBQUEsSUFBK0NDLElBQS9DLFNBQStDQSxJQUEvQzs7RUFGd0Q7RUFHeEQsT0FDSSw0REFDSSw2QkFBQyxpQkFBRDtJQUFNLE1BQU0sRUFBQyxzQkFBYjtJQUFvQyxLQUFLLEVBQUVDLE1BQU0sQ0FBQ047RUFBbEQsR0FBeURBLElBQXpELENBREosRUFFSSw2QkFBQyxpQkFBRDtJQUFNLEtBQUssRUFBRU0sTUFBTSxDQUFDTDtFQUFwQixHQUE4QkEsT0FBOUIsQ0FGSixFQUdLLDRCQUFBRixpQkFBaUIsS0FBSyxJQUF0QixpQ0FDQyw2QkFBQyxpQkFBRCw2QkFERCxDQUhMLEVBUUksNkJBQUMsaUJBQUQ7SUFBTSxLQUFLLEVBQUVPLE1BQU0sQ0FBQ0M7RUFBcEIsR0FDSSw2QkFBQyxrQkFBRDtJQUNJLEtBQUssRUFBRUQsTUFBTSxDQUFDRSxTQURsQjtJQUVJLE1BQU0sRUFBRTtNQUNSQyxHQUFHLHlDQUF1Q0osSUFBdkM7SUFESztFQUZaLEVBREosRUFPSSw2QkFBQyxpQkFBRDtJQUFNLEtBQUssRUFBRUMsTUFBTSxDQUFDSTtFQUFwQixHQUFrQ0MsSUFBSSxDQUFDQyxLQUFMLENBQVdWLElBQVgsQ0FBbEMsVUFQSixFQVFJLDZCQUFDLGlCQUFEO0lBQU0sS0FBSyxFQUFFSSxNQUFNLENBQUNGO0VBQXBCLFdBQWtDTyxJQUFJLENBQUNDLEtBQUwsQ0FBV1IsT0FBWCxDQUFsQyxVQVJKLEVBU0ksNkJBQUMsaUJBQUQ7SUFBTSxLQUFLLEVBQUVFLE1BQU0sQ0FBQ0g7RUFBcEIsV0FBa0NRLElBQUksQ0FBQ0MsS0FBTCxDQUFXVCxPQUFYLENBQWxDLFVBVEosQ0FSSixDQURKO0FBc0JEOztlQUVjTixlOztBQUVmLElBQU1TLE1BQU0sNEJBQUdPLHVCQUFBLENBQVdDLE1BQVgsQ0FBa0I7RUFDN0JkLElBQUksRUFBRTtJQUNGZSxLQUFLLEVBQUUsTUFETDtJQUVGQyxTQUFTLEVBQUUsUUFGVDtJQUdGQyxRQUFRLEVBQUUsRUFIUjtJQUlGQyxLQUFLLEVBQUU7RUFKTCxDQUR1QjtFQU83QmpCLE9BQU8sRUFBRTtJQUNMYyxLQUFLLEVBQUUsTUFERjtJQUVMQyxTQUFTLEVBQUUsUUFGTjtJQUdMQyxRQUFRLEVBQUUsRUFITDtJQUlMQyxLQUFLLEVBQUU7RUFKRixDQVBvQjtFQWE3QlgsT0FBTyxFQUFFO0lBQ0xZLGFBQWEsRUFBRSxRQURWO0lBRUxDLFVBQVUsRUFBRSxVQUZQO0lBR0xDLFlBQVksRUFBRTtFQUhULENBYm9CO0VBa0I3QmIsU0FBUyxFQUFFO0lBQ1BPLEtBQUssRUFBRSxHQURBO0lBRVBPLE1BQU0sRUFBRTtFQUZELENBbEJrQjtFQXNCM0JaLFdBQVcsRUFBRTtJQUNYTyxRQUFRLEVBQUUsRUFEQztJQUVYTSxVQUFVLEVBQUUsTUFGRDtJQUdYUCxTQUFTLEVBQUU7RUFIQSxDQXRCYztFQTJCM0JaLE9BQU8sRUFBRTtJQUNQYSxRQUFRLEVBQUUsRUFESDtJQUVQTSxVQUFVLEVBQUUsTUFGTDtJQUdQUCxTQUFTLEVBQUU7RUFISixDQTNCa0I7RUFnQzNCYixPQUFPLEVBQUU7SUFDUGMsUUFBUSxFQUFFLEVBREg7SUFFUE0sVUFBVSxFQUFFLE1BRkw7SUFHUFAsU0FBUyxFQUFFO0VBSEo7QUFoQ2tCLENBQWxCLENBQUgsQ0FBWiJ9