{"version":3,"names":["it","render","toJSON","expect","toMatchSnapshot","mainComponent","getByTestId","toBeTruthy","describe","mock_cityInfo","toHaveTextContent","mock_forecastInfo","screen","findAllByTestId","length","toBe"],"sources":["App-test.js"],"sourcesContent":["import 'react-native';\nimport React from 'react';\nimport { render, screen } from '@testing-library/react-native';\nimport { toHaveTextContent } from '@testing-library/jest-native/extend-expect';\nimport { mock_cityInfo, mock_forecastInfo } from \"../__mockData__/index\"\nimport App from '../App';\nimport MainWeatherCard from '../components/MainWeatherCard/MainWeatherCard';\nimport ForecastContainer from '../components/ForecastContainer/ForecastContainer';\n\nit('Generates a Snapshot of <App/>', () => {\n  const { toJSON } =render(<App />);\n  expect(toJSON()).toMatchSnapshot()\n});\n\nconst mainComponent = <App />;\n\n//show ActivityIndicator before fetch data\nit('Show ActivityIndicator before fetch fata', () => {\n  const { getByTestId } = render(mainComponent);\n  \n  expect(getByTestId('App.ActivityIndicator')).toBeTruthy();\n});\n\n//show current location info\ndescribe('Show current location info', () => {\n  it('City', () => {\n    const { getByTestId } = render(\n      <MainWeatherCard  cityInfo={mock_cityInfo} isCurrentLocation={true} />\n    )\n    expect(getByTestId(\"MainWeatherCard.city\")).toHaveTextContent(\"San Miguel de TucumÃ¡n\");\n  })\n  \n  it('Country', () => {\n    const { getByTestId } = render(\n      <MainWeatherCard  cityInfo={mock_cityInfo} isCurrentLocation={true} />\n    )\n    expect(getByTestId(\"MainWeatherCard.country\")).toHaveTextContent(\"Argentina\");\n  })\n})\n  it('Temp', () => {\n    const { getByTestId } = render(\n      <MainWeatherCard  cityInfo={mock_cityInfo} isCurrentLocation={true} />\n    )\n    expect(getByTestId(\"MainWeatherCard.temp\")).toHaveTextContent(\"24\");\n  })\n\n//show current location next 5 days forecast\n\n  it('Get current location next 5 days forecast', () => {\n    render(<ForecastContainer forecastInfo={mock_forecastInfo} />)\n    expect(screen.findAllByTestId(\"ForecastContainer.days\").length).toBe(5);\n  })\n"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEAA,EAAE,CAAC,gCAAD,EAAmC,YAAM;EACzC,cAAkB,IAAAC,oBAAA,EAAO,6BAAC,YAAD,OAAP,CAAlB;EAAA,IAAQC,MAAR,WAAQA,MAAR;;EACAC,MAAM,CAACD,MAAM,EAAP,CAAN,CAAiBE,eAAjB;AACD,CAHC,CAAF;;AAKA,IAAMC,aAAa,GAAG,6BAAC,YAAD,OAAtB;;AAGAL,EAAE,CAAC,0CAAD,EAA6C,YAAM;EACnD,eAAwB,IAAAC,oBAAA,EAAOI,aAAP,CAAxB;EAAA,IAAQC,WAAR,YAAQA,WAAR;;EAEAH,MAAM,CAACG,WAAW,CAAC,uBAAD,CAAZ,CAAN,CAA6CC,UAA7C;AACD,CAJC,CAAF;AAOAC,QAAQ,CAAC,4BAAD,EAA+B,YAAM;EAC3CR,EAAE,CAAC,MAAD,EAAS,YAAM;IACf,eAAwB,IAAAC,oBAAA,EACtB,6BAAC,wBAAD;MAAkB,QAAQ,EAAEQ,oBAA5B;MAA2C,iBAAiB,EAAE;IAA9D,EADsB,CAAxB;IAAA,IAAQH,WAAR,YAAQA,WAAR;;IAGAH,MAAM,CAACG,WAAW,CAAC,sBAAD,CAAZ,CAAN,CAA4CI,iBAA5C,CAA8D,uBAA9D;EACD,CALC,CAAF;EAOAV,EAAE,CAAC,SAAD,EAAY,YAAM;IAClB,eAAwB,IAAAC,oBAAA,EACtB,6BAAC,wBAAD;MAAkB,QAAQ,EAAEQ,oBAA5B;MAA2C,iBAAiB,EAAE;IAA9D,EADsB,CAAxB;IAAA,IAAQH,WAAR,YAAQA,WAAR;;IAGAH,MAAM,CAACG,WAAW,CAAC,yBAAD,CAAZ,CAAN,CAA+CI,iBAA/C,CAAiE,WAAjE;EACD,CALC,CAAF;AAMD,CAdO,CAAR;AAeEV,EAAE,CAAC,MAAD,EAAS,YAAM;EACf,eAAwB,IAAAC,oBAAA,EACtB,6BAAC,wBAAD;IAAkB,QAAQ,EAAEQ,oBAA5B;IAA2C,iBAAiB,EAAE;EAA9D,EADsB,CAAxB;EAAA,IAAQH,WAAR,YAAQA,WAAR;;EAGAH,MAAM,CAACG,WAAW,CAAC,sBAAD,CAAZ,CAAN,CAA4CI,iBAA5C,CAA8D,IAA9D;AACD,CALC,CAAF;AASAV,EAAE,CAAC,2CAAD,EAA8C,YAAM;EACpD,IAAAC,oBAAA,EAAO,6BAAC,0BAAD;IAAmB,YAAY,EAAEU;EAAjC,EAAP;EACAR,MAAM,CAACS,oBAAA,CAAOC,eAAP,CAAuB,wBAAvB,EAAiDC,MAAlD,CAAN,CAAgEC,IAAhE,CAAqE,CAArE;AACD,CAHC,CAAF"}