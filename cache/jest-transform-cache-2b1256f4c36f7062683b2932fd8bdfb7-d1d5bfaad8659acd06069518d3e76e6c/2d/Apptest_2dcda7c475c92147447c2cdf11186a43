db2d4582da73ead3589d05771b16f4ad
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("react-native");

var _react = _interopRequireDefault(require("react"));

var _reactNative2 = require("@testing-library/react-native");

var _extendExpect = require("@testing-library/jest-native/extend-expect");

var _index = require("../__mockData__/index");

var _App = _interopRequireDefault(require("../App"));

var _MainWeatherCard = _interopRequireDefault(require("../components/MainWeatherCard/MainWeatherCard"));

it('Generates a Snapshot of <App/>', function () {
  var _render = (0, _reactNative2.render)(_react.default.createElement(_App.default, null)),
      toJSON = _render.toJSON;

  expect(toJSON()).toMatchSnapshot();
});

var mainComponent = _react.default.createElement(_App.default, null);

it('Show ActivityIndicator before fetch fata', function () {
  var _render2 = (0, _reactNative2.render)(mainComponent),
      getByTestId = _render2.getByTestId;

  expect(getByTestId('App.ActivityIndicator')).toBeTruthy();
});
describe('Show current location info', function () {
  it('City', function () {
    var _render3 = (0, _reactNative2.render)(_react.default.createElement(_MainWeatherCard.default, {
      cityInfo: _index.mock_cityInfo,
      isCurrentLocation: true
    })),
        getByTestId = _render3.getByTestId;

    expect(getByTestId("MainWeatherCard.city")).toHaveTextContent("San Miguel de Tucumán");
  });
  it('Country', function () {
    var _render4 = (0, _reactNative2.render)(_react.default.createElement(_MainWeatherCard.default, {
      cityInfo: _index.mock_cityInfo,
      isCurrentLocation: true
    })),
        getByTestId = _render4.getByTestId;

    expect(getByTestId("MainWeatherCard.country")).toHaveTextContent("San Miguel de Tucumán");
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpdCIsInJlbmRlciIsInRvSlNPTiIsImV4cGVjdCIsInRvTWF0Y2hTbmFwc2hvdCIsIm1haW5Db21wb25lbnQiLCJnZXRCeVRlc3RJZCIsInRvQmVUcnV0aHkiLCJkZXNjcmliZSIsIm1vY2tfY2l0eUluZm8iLCJ0b0hhdmVUZXh0Q29udGVudCJdLCJzb3VyY2VzIjpbIkFwcC10ZXN0LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAncmVhY3QtbmF0aXZlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyByZW5kZXIsIHNjcmVlbiB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcbmltcG9ydCB7IHRvSGF2ZVRleHRDb250ZW50IH0gZnJvbSAnQHRlc3RpbmctbGlicmFyeS9qZXN0LW5hdGl2ZS9leHRlbmQtZXhwZWN0JztcbmltcG9ydCB7IG1vY2tfY2l0eUluZm8sIG1vY2tfZm9yZWNhc3RJbmZvIH0gZnJvbSBcIi4uL19fbW9ja0RhdGFfXy9pbmRleFwiXG5pbXBvcnQgQXBwIGZyb20gJy4uL0FwcCc7XG5pbXBvcnQgTWFpbldlYXRoZXJDYXJkIGZyb20gJy4uL2NvbXBvbmVudHMvTWFpbldlYXRoZXJDYXJkL01haW5XZWF0aGVyQ2FyZCc7XG5cbml0KCdHZW5lcmF0ZXMgYSBTbmFwc2hvdCBvZiA8QXBwLz4nLCAoKSA9PiB7XG4gIGNvbnN0IHsgdG9KU09OIH0gPXJlbmRlcig8QXBwIC8+KTtcbiAgZXhwZWN0KHRvSlNPTigpKS50b01hdGNoU25hcHNob3QoKVxufSk7XG5cbmNvbnN0IG1haW5Db21wb25lbnQgPSA8QXBwIC8+O1xuXG4vL3Nob3cgQWN0aXZpdHlJbmRpY2F0b3IgYmVmb3JlIGZldGNoIGRhdGFcbml0KCdTaG93IEFjdGl2aXR5SW5kaWNhdG9yIGJlZm9yZSBmZXRjaCBmYXRhJywgKCkgPT4ge1xuICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIobWFpbkNvbXBvbmVudCk7XG4gIFxuICBleHBlY3QoZ2V0QnlUZXN0SWQoJ0FwcC5BY3Rpdml0eUluZGljYXRvcicpKS50b0JlVHJ1dGh5KCk7XG59KTtcblxuLy9zaG93IGN1cnJlbnQgbG9jYXRpb24gaW5mb1xuZGVzY3JpYmUoJ1Nob3cgY3VycmVudCBsb2NhdGlvbiBpbmZvJywgKCkgPT4ge1xuICBpdCgnQ2l0eScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8TWFpbldlYXRoZXJDYXJkICBjaXR5SW5mbz17bW9ja19jaXR5SW5mb30gaXNDdXJyZW50TG9jYXRpb249e3RydWV9IC8+XG4gICAgKVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZChcIk1haW5XZWF0aGVyQ2FyZC5jaXR5XCIpKS50b0hhdmVUZXh0Q29udGVudChcIlNhbiBNaWd1ZWwgZGUgVHVjdW3DoW5cIik7XG4gIH0pXG4gIFxuICBpdCgnQ291bnRyeScsICgpID0+IHtcbiAgICBjb25zdCB7IGdldEJ5VGVzdElkIH0gPSByZW5kZXIoXG4gICAgICA8TWFpbldlYXRoZXJDYXJkICBjaXR5SW5mbz17bW9ja19jaXR5SW5mb30gaXNDdXJyZW50TG9jYXRpb249e3RydWV9IC8+XG4gICAgKVxuICAgIGV4cGVjdChnZXRCeVRlc3RJZChcIk1haW5XZWF0aGVyQ2FyZC5jb3VudHJ5XCIpKS50b0hhdmVUZXh0Q29udGVudChcIlNhbiBNaWd1ZWwgZGUgVHVjdW3DoW5cIik7XG4gIH0pXG59KVxuXG5cblxuXG4vL3Nob3cgY3VycmVudCBjb3VudHJ5XG4vL3Nob3cgY3VycmVudCBsb2NhdGlvbiB0ZW1wXG4vL3Nob3cgY3VycmVudCBsb2NhdGlvbiBuZXh0IDUgZGF5cyBmb3JlY2FzdCBcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQUEsRUFBRSxDQUFDLGdDQUFELEVBQW1DLFlBQU07RUFDekMsY0FBa0IsSUFBQUMsb0JBQUEsRUFBTyw2QkFBQyxZQUFELE9BQVAsQ0FBbEI7RUFBQSxJQUFRQyxNQUFSLFdBQVFBLE1BQVI7O0VBQ0FDLE1BQU0sQ0FBQ0QsTUFBTSxFQUFQLENBQU4sQ0FBaUJFLGVBQWpCO0FBQ0QsQ0FIQyxDQUFGOztBQUtBLElBQU1DLGFBQWEsR0FBRyw2QkFBQyxZQUFELE9BQXRCOztBQUdBTCxFQUFFLENBQUMsMENBQUQsRUFBNkMsWUFBTTtFQUNuRCxlQUF3QixJQUFBQyxvQkFBQSxFQUFPSSxhQUFQLENBQXhCO0VBQUEsSUFBUUMsV0FBUixZQUFRQSxXQUFSOztFQUVBSCxNQUFNLENBQUNHLFdBQVcsQ0FBQyx1QkFBRCxDQUFaLENBQU4sQ0FBNkNDLFVBQTdDO0FBQ0QsQ0FKQyxDQUFGO0FBT0FDLFFBQVEsQ0FBQyw0QkFBRCxFQUErQixZQUFNO0VBQzNDUixFQUFFLENBQUMsTUFBRCxFQUFTLFlBQU07SUFDZixlQUF3QixJQUFBQyxvQkFBQSxFQUN0Qiw2QkFBQyx3QkFBRDtNQUFrQixRQUFRLEVBQUVRLG9CQUE1QjtNQUEyQyxpQkFBaUIsRUFBRTtJQUE5RCxFQURzQixDQUF4QjtJQUFBLElBQVFILFdBQVIsWUFBUUEsV0FBUjs7SUFHQUgsTUFBTSxDQUFDRyxXQUFXLENBQUMsc0JBQUQsQ0FBWixDQUFOLENBQTRDSSxpQkFBNUMsQ0FBOEQsdUJBQTlEO0VBQ0QsQ0FMQyxDQUFGO0VBT0FWLEVBQUUsQ0FBQyxTQUFELEVBQVksWUFBTTtJQUNsQixlQUF3QixJQUFBQyxvQkFBQSxFQUN0Qiw2QkFBQyx3QkFBRDtNQUFrQixRQUFRLEVBQUVRLG9CQUE1QjtNQUEyQyxpQkFBaUIsRUFBRTtJQUE5RCxFQURzQixDQUF4QjtJQUFBLElBQVFILFdBQVIsWUFBUUEsV0FBUjs7SUFHQUgsTUFBTSxDQUFDRyxXQUFXLENBQUMseUJBQUQsQ0FBWixDQUFOLENBQStDSSxpQkFBL0MsQ0FBaUUsdUJBQWpFO0VBQ0QsQ0FMQyxDQUFGO0FBTUQsQ0FkTyxDQUFSIn0=