6032cfcf8c554ec38a726774d756f861
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _reactNative = require("react-native");

var _react = _interopRequireWildcard(require("react"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function SelectedCityModal(_ref) {
  var onSelectCity = _ref.onSelectCity,
      citiesList = _ref.citiesList;

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      isModalVisible = _useState2[0],
      setIsModalVisible = _useState2[1];

  var showModal = function showModal() {
    setIsModalVisible(true);
  };

  var handleCancel = function handleCancel() {
    setIsModalVisible(false);
  };

  var handleSelect = function handleSelect(city) {
    onSelectCity(city);
    handleCancel();
  };

  return _react.default.createElement(_reactNative.View, null, _react.default.createElement(_reactNative.View, {
    style: styles.showModalButton
  }, _react.default.createElement(_reactNative.Button, {
    title: "Seleccionar otra ciudad",
    onPress: showModal,
    color: "#6262b7"
  })), _react.default.createElement(_reactNative.Modal, {
    visible: isModalVisible,
    animationType: "slide"
  }, _react.default.createElement(_reactNative.View, {
    style: styles.modalContainer
  }, _react.default.createElement(_reactNative.Text, {
    style: styles.modalTitleText
  }, "Otras ciudades disponibles"), citiesList.map(function (city) {
    return _react.default.createElement(_reactNative.View, {
      key: city.city,
      style: styles.modalOptionButton
    }, _react.default.createElement(_reactNative.Button, {
      onPress: function onPress() {
        return handleSelect(city);
      },
      title: city.city,
      color: "#6262b7"
    }));
  }), _react.default.createElement(_reactNative.View, {
    style: styles.modalCancelButton
  }, _react.default.createElement(_reactNative.Button, {
    title: "Cancelar",
    onPress: handleCancel,
    color: "blue"
  })))));
}

var styles = _reactNative.StyleSheet.create({
  showModalButton: {
    marginTop: 15
  },
  modalContainer: {
    flex: 1,
    flexDirection: "column",
    justifyContent: "center",
    alignItems: "center",
    padding: 16,
    marginTop: 20
  },
  modalTitleText: {
    fontWeight: 'bold',
    marginBottom: 15
  },
  modalOptionButton: {
    margin: 5
  },
  modalCancelButton: {
    marginTop: 50
  }
});

var _default = SelectedCityModal;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZWxlY3RlZENpdHlNb2RhbCIsIm9uU2VsZWN0Q2l0eSIsImNpdGllc0xpc3QiLCJ1c2VTdGF0ZSIsImlzTW9kYWxWaXNpYmxlIiwic2V0SXNNb2RhbFZpc2libGUiLCJzaG93TW9kYWwiLCJoYW5kbGVDYW5jZWwiLCJoYW5kbGVTZWxlY3QiLCJjaXR5Iiwic3R5bGVzIiwic2hvd01vZGFsQnV0dG9uIiwibW9kYWxDb250YWluZXIiLCJtb2RhbFRpdGxlVGV4dCIsIm1hcCIsIm1vZGFsT3B0aW9uQnV0dG9uIiwibW9kYWxDYW5jZWxCdXR0b24iLCJTdHlsZVNoZWV0IiwiY3JlYXRlIiwibWFyZ2luVG9wIiwiZmxleCIsImZsZXhEaXJlY3Rpb24iLCJqdXN0aWZ5Q29udGVudCIsImFsaWduSXRlbXMiLCJwYWRkaW5nIiwiZm9udFdlaWdodCIsIm1hcmdpbkJvdHRvbSIsIm1hcmdpbiJdLCJzb3VyY2VzIjpbIlNlbGVjdGVkQ2l0eU1vZGFsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0eWxlU2hlZXQsIFZpZXcsIFRleHQsIE1vZGFsLCBCdXR0b24gfSBmcm9tICdyZWFjdC1uYXRpdmUnO1xuaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xuXG5cbmZ1bmN0aW9uIFNlbGVjdGVkQ2l0eU1vZGFsKHsgb25TZWxlY3RDaXR5LCBjaXRpZXNMaXN0IH0pIHtcbiAgICBjb25zdCBbaXNNb2RhbFZpc2libGUsIHNldElzTW9kYWxWaXNpYmxlXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgICBcbiAgICBjb25zdCBzaG93TW9kYWwgPSAoKSA9PiB7XG4gICAgICAgIHNldElzTW9kYWxWaXNpYmxlKHRydWUpO1xuICAgIH07XG5cbiAgICBjb25zdCBoYW5kbGVDYW5jZWwgPSAoKSA9PiB7XG4gICAgICAgIHNldElzTW9kYWxWaXNpYmxlKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlU2VsZWN0ID0gKGNpdHkpID0+IHtcbiAgICAgICAgb25TZWxlY3RDaXR5KGNpdHkpXG4gICAgICAgIGhhbmRsZUNhbmNlbCgpXG4gICAgfVxuICAgIFxuICAgIHJldHVybihcbiAgICAgICAgPFZpZXc+XG4gICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLnNob3dNb2RhbEJ1dHRvbn0+XG4gICAgICAgICAgICAgICAgPEJ1dHRvbiB0aXRsZT0nU2VsZWNjaW9uYXIgb3RyYSBjaXVkYWQnIG9uUHJlc3M9e3Nob3dNb2RhbH0gY29sb3I9JyM2MjYyYjcnLz5cbiAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgIDxNb2RhbCB2aXNpYmxlPXtpc01vZGFsVmlzaWJsZX0gYW5pbWF0aW9uVHlwZT0nc2xpZGUnPlxuICAgICAgICAgICAgICAgIDxWaWV3IHN0eWxlPXtzdHlsZXMubW9kYWxDb250YWluZXJ9PlxuICAgICAgICAgICAgICAgICAgICA8VGV4dCBzdHlsZT17c3R5bGVzLm1vZGFsVGl0bGVUZXh0fT5PdHJhcyBjaXVkYWRlcyBkaXNwb25pYmxlczwvVGV4dD5cbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2l0aWVzTGlzdC5tYXAoKGNpdHkpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxWaWV3IGtleT17Y2l0eS5jaXR5fSBzdHlsZT17c3R5bGVzLm1vZGFsT3B0aW9uQnV0dG9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gIG9uUHJlc3M9eygpPT4gaGFuZGxlU2VsZWN0KGNpdHkpfSB0aXRsZT17Y2l0eS5jaXR5fSBjb2xvcj0nIzYyNjJiNycvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA8VmlldyBzdHlsZT17c3R5bGVzLm1vZGFsQ2FuY2VsQnV0dG9ufT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b24gdGl0bGU9J0NhbmNlbGFyJyBvblByZXNzPXtoYW5kbGVDYW5jZWx9IGNvbG9yPSdibHVlJy8+XG4gICAgICAgICAgICAgICAgICAgIDwvVmlldz5cbiAgICAgICAgICAgICAgICA8L1ZpZXc+XG4gICAgICAgICAgICA8L01vZGFsPlxuICAgICAgICA8L1ZpZXc+XG4gICAgKVxufVxuXG5jb25zdCBzdHlsZXMgPSBTdHlsZVNoZWV0LmNyZWF0ZSh7XG4gICAgc2hvd01vZGFsQnV0dG9uOntcbiAgICAgICAgbWFyZ2luVG9wOiAxNSxcbiAgICB9LFxuICAgIG1vZGFsQ29udGFpbmVyOiB7XG4gICAgICAgIGZsZXg6IDEsXG4gICAgICAgIGZsZXhEaXJlY3Rpb246IFwiY29sdW1uXCIsXG4gICAgICAgIGp1c3RpZnlDb250ZW50OiBcImNlbnRlclwiLFxuICAgICAgICBhbGlnbkl0ZW1zOiBcImNlbnRlclwiLFxuICAgICAgICBwYWRkaW5nOiAxNixcbiAgICAgICAgbWFyZ2luVG9wOiAyMCxcbiAgICB9LFxuICAgIG1vZGFsVGl0bGVUZXh0OntcbiAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnLFxuICAgICAgICBtYXJnaW5Cb3R0b206IDE1LFxuICAgIH0sXG4gICAgbW9kYWxPcHRpb25CdXR0b246IHtcbiAgICAgICAgbWFyZ2luOiA1LFxuICAgIH0sXG4gICAgbW9kYWxDYW5jZWxCdXR0b246IHtcbiAgICAgICAgbWFyZ2luVG9wOiA1MCxcbiAgICB9XG59KVxuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3RlZENpdHlNb2RhbDsgXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOzs7Ozs7QUFHQSxTQUFTQSxpQkFBVCxPQUF5RDtFQUFBLElBQTVCQyxZQUE0QixRQUE1QkEsWUFBNEI7RUFB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